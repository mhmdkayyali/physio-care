generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum user_types {
  PATIENT
  THERAPIST
  ADMIN
}

model users {
  id                                Int                                @id @unique @default(autoincrement())
  first_name                        String                             @db.VarChar(255)
  last_name                         String                             @db.VarChar(255)
  email                             String                             @db.VarChar(255)
  password                          String                             @db.VarChar(255)
  phone_number                      String                             @db.VarChar(255)
  user_type                         user_types                         @default(PATIENT)
  location                          String                             @default("") @db.VarChar(255)
  longitude                         Float
  latitude                          Float
  gender                            genders                            @default(FEMALE)
  dob                               DateTime                           @db.Date
  canceled_appointments             appointments[]                     @relation("canceled_appointments")
  patient_appointments              appointments[]                     @relation("patient_appointments")
  therapist_appointments            appointments[]                     @relation("therapist_appointments")
  therapist_additional_informations therapist_additional_informations?
  pt_additional_informations        pt_additional_informations?
  created_at                        DateTime?                          @default(now())
  updated_at                        DateTime?                          @updatedAt
}

model appointments {
  id                 Int            @id @unique @default(autoincrement())
  date_time          DateTime
  time               String         @default("") @db.VarChar(255)
  canceled_at        DateTime?
  canceled_by_id     Int?
  canceled_by        users?         @relation("canceled_appointments", fields: [canceled_by_id], references: [id], onDelete: Cascade)
  patient_id         Int
  patient            users?         @relation("patient_appointments", fields: [patient_id], references: [id], onDelete: Cascade)
  therapist_id       Int
  therapist          users?         @relation("therapist_appointments", fields: [therapist_id], references: [id], onDelete: Cascade)
  session_type       session_types  @default(ONLINE)
  meeting_links      meeting_links?
  pt_attended        Boolean?
  therapist_attended Boolean?
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
}

model meeting_links {
  id             Int          @id @unique @default(autoincrement())
  meeting_link   String       @db.VarChar(255)
  appointment_id Int          @unique
  appointment    appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model therapist_additional_informations {
  id              Int     @id @unique @default(autoincrement())
  specialty       String  @db.VarChar(255)
  rate            String  @default("") @db.VarChar(255)
  profile_picture String  @default("") @db.LongText
  users_id        Int     @unique
  users           users   @relation(fields: [users_id], references: [id], onDelete: Cascade)
  monday          Boolean @default(false)
  tuesday         Boolean @default(false)
  wednesday       Boolean @default(false)
  thursday        Boolean @default(false)
  friday          Boolean @default(false)
  saturday        Boolean @default(false)
  sunday          Boolean @default(false)
  start_time      String  @default("") @db.VarChar(255)
  end_time        String  @default("") @db.VarChar(255)
}

model pt_additional_informations {
  id              Int      @id @unique @default(autoincrement())
  diagnosis       String   @db.VarChar(255)
  case_date       DateTime @db.Date
  treating_doctor String   @db.VarChar(255)
  users_id        Int      @unique
  users           users    @relation(fields: [users_id], references: [id], onDelete: Cascade)
}
